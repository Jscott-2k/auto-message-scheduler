name: Sync Webhooks and Deploy

on:
  schedule:
    - cron: '*/30 * * * *'      # every 30 min
  workflow_dispatch:            # manual trigger

permissions:
  contents: write               # allow commits from the action

jobs:
  sync-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # ─────────── repo checkout ───────────
    - name: Checkout repository
      uses: actions/checkout@v4

    # ─────────── Node (for generate‑cron) ───────────
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install npm dependencies
      run: npm ci

    # ─────────── install gdown & pull webhooks.json ───────────
    - name: Install gdown
      run: pip install --no-cache-dir gdown

    - name: Download latest webhooks.json
      run: |
        gdown --id 12RANwESLxYGsxT53SbHVK4XmjOcWipYI \
              --no-cookies \
              --output webhooks.json

    # ─────────── regenerate fly.toml cron blocks ───────────
    - name: Generate fly.toml cron entries
      run: npm run generate-cron

    # ─────────── detect file changes ───────────
    - name: Detect changes
      id: diff
      run: |
        if git diff --quiet webhooks.json fly.toml; then
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "No change detected"
        else
          echo "changed=true"  >> $GITHUB_OUTPUT
          echo "Changes detected"
        fi

    # ─────────── commit only when changed ───────────
    - name: Commit and push changes
      if: steps.diff.outputs.changed == 'true'
      run: |
        git config user.name  "github-actions"
        git config user.email "actions@github.com"
        git add webhooks.json fly.toml
        git commit -m "Update webhooks and cron schedule"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # ─────────── deploy only when changed ───────────
    - name: Set up Fly CLI
      if: steps.diff.outputs.changed == 'true'
      uses: superfly/flyctl-actions/setup-flyctl@master
      with:
        version: latest

    - name: Deploy to Fly.io
      if: steps.diff.outputs.changed == 'true'
      run: flyctl deploy --remote-only --build-only
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
